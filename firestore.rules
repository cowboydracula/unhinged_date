rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }

    // --- profiles ---
    match /profiles/{uid} {
      allow read: if signedIn();
      allow create, update, delete: if signedIn() && request.auth.uid == uid;

      match /tokens/{token} {
        allow read, write: if signedIn() && request.auth.uid == uid;
      }

      // --- profile prompts (public to signed-in; only owner can write) ---
      match /prompts/{promptId} {
        allow read: if signedIn();
        allow create, update, delete: if signedIn() && request.auth.uid == uid;
      }
    }

    // --- blocks ---
    // Only the blocker can read/write their block list.
    match /blocks/{uid} {
      allow read, write: if signedIn() && request.auth.uid == uid;

      match /blocked/{subjectUid} {
        allow read: if signedIn() && request.auth.uid == uid;
        allow create: if signedIn()
                      && request.auth.uid == uid
                      && request.resource.data.blockerUid == uid
                      && request.resource.data.subjectUid == subjectUid;
        allow delete: if signedIn() && request.auth.uid == uid;
        allow update: if false;
      }
    }

    // No collection-group read for subjects. They cannot enumerate who blocked them.
    match /{any=**}/blocked/{subjectUid} {
      allow read, write: if false;
    }

    // --- likes ---
    match /likes/{likeId} {
      allow create: if signedIn() && request.resource.data.fromUid == request.auth.uid;
      allow read: if signedIn() && (
        resource.data.fromUid == request.auth.uid ||
        resource.data.toUid == request.auth.uid
      );
      allow delete: if signedIn() && resource.data.fromUid == request.auth.uid;
      allow update: if false;
    }

    // --- matches (participant-only visibility; supports collectionGroup) ---
    function isParticipantDoc(d) {
      return (('members' in d.data) && request.auth.uid in d.data.members)
          || (('participants' in d.data) && request.auth.uid in d.data.participants);
    }

    match /{p=**}/matches/{matchId} {
      allow read: if signedIn() && isParticipantDoc(resource);
      allow create, update, delete: if false; // typically via Functions
    }

    match /{p=**}/matches/{matchId}/messages/{msgId} {
      allow read, create: if signedIn() && isParticipantDoc(
        get(/databases/$(database)/documents/$(p)/matches/$(matchId))
      );
      allow update, delete: if false;
    }

    // deny everything else
    match /{document=**} { allow read, write: if false; }
  }
}
